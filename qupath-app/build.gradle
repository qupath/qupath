/**
 * Build QuPath application.
 * This involves creating a jpackage task.
 *
 * Important properties:
 *  -Pld-path=true - set LD_LIBRARY_PATH on Linux (for both 'run' and distribution tasks).
 *                   This is needed to use QuPath's own OpenSlide rather than system shared libraries.
 *  -Ppackage='installer' - request jpackage to create an installer rather than an image.
 *                           Other options include 'all', 'deb', 'rpm', 'exe', 'msi', 'pkg' and 'dmg' 
 *                           although not all are available on all platforms.
 */

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
}

plugins {
    id 'org.gradle.crypto.checksum' version '1.4.0'
    id 'qupath.common-conventions'
    id 'qupath.djl-conventions'
    id 'application'
    alias(libs.plugins.license.report)
    alias(libs.plugins.jpackage)
    alias(libs.plugins.javafx)
}


ext.moduleName = 'qupath.app'
archivesBaseName = 'qupath-app'
description = "Main QuPath application."

/*
 * There are several problems with jpackage on macOS:
 * - The major version must be > 0, or a 'wrong' version needs to be applied
 * - The wrong version is appended to the end of any installer filenames
 * - The .cfg file generated can be invalid (e.g. QuPath-0.3.cfg for QuPath-v0.3.0),
 *   which results in the app being unable to launch.
 *
 * These variables are used to help overcome this by specifying the defaults to use
 * up-front, so that a later action can rename any generated packages.
 */
ext {
    macOSDefaultVersion = "1"
    qupathVersion = gradle.ext.qupathVersion
    qupathAppName = "QuPath-${qupathVersion}"
}

// Required since moving to JavaFX Gradle Plugin v0.1.0
javafx {
    version = libs.versions.javafx.get()
    modules = ["javafx.base",
               "javafx.controls",
               "javafx.graphics",
               "javafx.media",
               "javafx.fxml",
               "javafx.web",
               "javafx.swing"]
}

// Determine java version associated with toolchain
def toolchainJavaVersion = getToolchainJavaVersion()

// Put the output in the main directory so it is easier to find
//project.buildDir = rootProject.file('build')

application {
    mainClass = "qupath.QuPath"
    applicationName = qupathAppName
    applicationDefaultJvmArgs = buildDefaultJvmArgs("${rootProject.buildDir}/natives", toolchainJavaVersion)

    // Necessary when using ./gradlew run to support style manager to change themes
    applicationDefaultJvmArgs << '--add-opens'
    applicationDefaultJvmArgs << 'javafx.graphics/com.sun.javafx.css=ALL-UNNAMED'

}

/**
 * Add classpath and main class to make it easier to launch from jar
 */
afterEvaluate {
    jar {
        manifest {
            def manifestAttributes = [
                    "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                    "Main-Class": "qupath.QuPath"
            ]
            attributes(manifestAttributes)
        }
    }
}

/**
 * Create a start script that sets LD_LIBRARY_PATH for Linux builds.
 * This can (sometimes) help get OpenSlide working properly.
 */
ext {
    setLdLibraryPath = false
}

tasks.register('checkLdLibrary') {
    doLast {
        if (project.properties['platform.name'] == 'linux') {
            if (rootProject.properties['ld-path']) {
                println "Setting LD_LIBRARY_PATH"
                setLdLibraryPath = true
            } else {
                println "If you experience OpenSlide issues, try './gradlew run -Pld-path=true' to set LD_LIBRARY_PATH"
            }
        }
    }
}

startScripts {
    doLast {
        // Update library path
        def currentPath = "${rootProject.buildDir}/natives"
        def newPath = '$APP_HOME/lib'
        unixScript.text = unixScript.text.replace(currentPath, newPath)
        windowsScript.text = unixScript.text.replace(currentPath, newPath)

        // If required, set LD_LIBRARY_PATH for Linux
        if (setLdLibraryPath) {
            println 'Setting LD_LIBRARY_PATH in start script'
            def oldCmd = 'exec "$JAVACMD" "$@"'
            def newCmd = 'export LD_LIBRARY_PATH="$APP_HOME/lib"' + System.lineSeparator() + oldCmd
            unixScript.text = unixScript.text.replace(oldCmd, newCmd)
        }
    }
}

/**
 * Determine which projects to include/exclude as dependencies
 */
def excludedProjects = [project.name]
def includedProjects = rootProject.subprojects.findAll { !excludedProjects.contains(it.name) }

dependencies {
    implementation includedProjects
    implementation libs.picocli
}

/**
 * Extract native libraries.
 * This happens early, because it is useful to ensure the native libraries are
 * available if launching QuPath from an IDE.
 */
tasks.register("extractNatives") {
    description "Extract native libraries to a 'natives' directory"
    group "QuPath"

    doLast {
        def nativesClassifier = project.properties['platform.classifier']
        if (nativesClassifier == null) {
            logger.warn("No natives classifier found!")
            return
        }
        def additionalResourcesDir = file("${rootProject.buildDir}/natives")
        configurations.runtimeClasspath.files.findAll({ it.getName().contains(nativesClassifier) }).each { file ->
            logger.info("Extracting native libraries from {} into {}", file, additionalResourcesDir)
            copy {
                from zipTree(file)
                into additionalResourcesDir.getAbsolutePath()
                exclude "/META-INF/"
            }
        }
    }
}

/**
 * Create a single javadoc jar
 */
task mergedJavadocJar(type: Jar, dependsOn: rootProject.tasks.mergedJavadocs) {
    archiveFileName = "qupath-$qupathVersion-javadoc.jar"
    destinationDirectory = file("${rootProject.buildDir}/docs-merged/")
    from rootProject.tasks.mergedJavadocs.destinationDir
}

/**
 * Specify task dependencies
 */
extractNatives.mustRunAfter(allprojects.tasks.clean)
compileJava.dependsOn(extractNatives)
run.dependsOn(checkLdLibrary)
startScripts.dependsOn(checkLdLibrary)
jpackage.dependsOn(extractNatives)
jpackage.dependsOn(mergedJavadocJar)
jpackage.dependsOn(checkLdLibrary)

/**
 * Create license report
 */
import com.github.jk1.license.render.*

licenseReport {
    File fileUnknown = rootProject.file('unknown-license-details.txt')
    renderers = [new TextReportRenderer('THIRD-PARTY.txt'),
//               new CsvReportRenderer(),
                 new InventoryHtmlReportRenderer('index.html', 'Third party licenses', fileUnknown)]
    outputDir = "${rootProject.buildDir}/reports/dependency-license"

    // TODO: Try to remove this. It's needed (I think) due to the license plugin not supporting
    //       Gradle variants, as required by the JavaFX Gradle Plugin v0.1.0. Possibly-relevant links:
    //       - https://github.com/openjfx/javafx-gradle-plugin#variants
    //       - https://github.com/jk1/Gradle-License-Report/issues/199
    //       The JavaFX license is still included in QuPath, but unfortunately not in this report.
    excludeGroups = ['org.openjfx']
}
tasks.startScripts.dependsOn("generateLicenseReport")


/**
 * Copy key files into the distribution
 */
distributions {
    main {
        contents {
            into('lib') {
                from project.rootDir
                include 'CHANGELOG.md'
                include 'STARTUP.md'
                include 'LICENSE'
            }
            // Get the core licenses associated with the app
            into('lib') {
                from '.'
                include 'licenses/**'
            }
            // Check if we have licenses stored with other extensions,
            // either directly in the project directory or under 'resources'
            into('lib') {
                from includedProjects.projectDir
                from includedProjects.projectDir.collect { f -> new File(f, 'src/main/resources') }
                include 'licenses/**'
                includeEmptyDirs = false
            }
            // Copy license report
            into('lib/licenses') {
                from "${rootProject.buildDir}/reports/dependency-license/"
                include 'THIRD-PARTY.txt'
            }
            // Copy native libraries
            into('lib') {
                from "${rootProject.buildDir}/natives"
            }
            // Copy native libraries
            into('lib/docs') {
                from mergedJavadocJar.archiveFile
            }
        }
    }
}

/**
 * Don't create a zip - it's slow, and generally unnecessary
 */
distZip {
    enabled = false
}


/**
 * Create Java Runtime & call jpackage
 */
runtime {
    options = [
            '--strip-debug',
            '--no-header-files',
            '--no-man-pages',
            '--strip-native-commands',
            '--compress', '2',
            '--bind-services'
    ]
    modules = [
            'java.desktop',
            'java.xml',
            'java.scripting',
            'java.sql',
            'java.naming',
            'jdk.unsupported',

            'jdk.zipfs',           // Needed for zip filesystem support

            'java.net.http',        // Add HttpClient support (may be used by scripts)
            'java.management',      // Useful to check memory usage
            'jdk.management.agent', // Enables VisualVM to connect and sample CPU use
            'jdk.jsobject',         // Needed to interact with WebView through JSObject
    ]

    def params = buildParameters()
//  println params
    ext {
        preferredName = 'QuPath'
    }

    for (installer in params.installerTypes) {
        if (installer != null)
            println "Calling JPackage for '${installer}'"

        jpackage {
            mainJar = params.mainJar
            jvmArgs = params.jvmArgs
            imageName = params.imageName
            appVersion = params.appVersion
            resourceDir = params.resourceDir
            imageOptions = params.imageOptions
            skipInstaller = params.skipInstaller
            installerType = installer
            installerOptions = params.installerOptions
            installerName = params.installerName
            imageOutputDir = params.outputDir
            installerOutputDir = params.outputDir
        }
    }
}

// Removed - this was much more trouble than it was worth, causing file permissions issues
// that were only evident after downloading & installing (building locally was ok).
// jpackage in Java 20 also seemed to pick up on the plist changes and wasn't pleased.
///**
// * Fix the version on macOS - see https://github.com/qupath/qupath/issues/1250
// * @param appFile
// * @return
// */
//def fixMacOSVersion(File appFile) {
//    def plistFile = new File("${appFile.getCanonicalPath()}/Contents/Info.plist")
//    def versionToInclude = getNonSnapshotVersion()
//    if (plistFile.exists()) {
//        // Update the plist with the 'correct' version (since jpackage blocks anything before 1.x.x)
//        String path = plistFile.getCanonicalPath()
//        println "Setting CFBundleVersion to ${versionToInclude}"
//        exec {
//            commandLine '/usr/libexec/PlistBuddy', '-c', "Set :CFBundleVersion ${versionToInclude}", path
//        }
//        println "Setting CFBundleShortVersionString to ${qupathVersion}"
//        exec {
//            commandLine '/usr/libexec/PlistBuddy', '-c', "Set :CFBundleShortVersionString ${qupathVersion}", path
//        }
//        // We want an identifier that is unique to the major/minor version, but can exclude the patch
//        // We expect that users may want to keep multiple versions of QuPath installed for reproducibility,
//        // but making all patch versions uniquely identifiable may make encouraging updates more difficult.
//        String majorMinorVersion = versionToInclude
//        String[] parts = majorMinorVersion.split("\\.")
//        if (parts.length > 2)
//            majorMinorVersion = parts[0] + "." + parts[1]
//        String bundleId = "qupath-${majorMinorVersion}"
//        println "Setting CFBundleIdentifier to ${bundleId}"
//        exec {
//            commandLine '/usr/libexec/PlistBuddy', '-c', "Set :CFBundleIdentifier ${bundleId}", path
//        }
//    }
//}

/**
 * Build a .pkg for an existing .app on macOS.
 * This is a separate task because it needs to be run after the Info.plist has been updated.
 * @param appFile
 * @return
 */
def makeMacOSPkg(File appFile) {
    exec {
        workingDir appFile.getParentFile()
        commandLine 'jpackage',
                '-n', 'QuPath',
                '--app-image', appFile.getCanonicalPath(),
                '--type', 'pkg',
//                '--mac-package-identifier', 'qupath',
                '--app-version', qupathVersion
    }
}

/**
 * Postprocessing of jpackage outputs; this is needed to fix the macOS version
 * and assemble the outputs for the checksums.
 */
tasks.register('jpackageFinalize') {
    doLast {
        def outputDir = new File("${rootProject.layout.buildDirectory.get()}")
        // Loop for Mac things to do
        def appFile = new File(outputDir, "/dist/${getCorrectAppName('.app')}")
        if (appFile.exists()) {
//            fixMacOSVersion(appFile)
            // We need to make the macOS pkg here to incorporate the changes
            if (findProperty('package')?.toLowerCase() in ['installer', 'pkg']) {
                println "Creating pkg"
                makeMacOSPkg(appFile)
                // Ensure we haven't accidentally changed the name
                def file = new File(appFile.getParentFile(), "QuPath-${qupathVersion}.pkg")
                String correctName = getCorrectAppName('.pkg')
                if (file.exists() && !file.name.equals(correctName)) {
                    file.renameTo(new File(file.getParent(), correctName))
                }
                // Remove the .app as it's no longer needed (and just takes up space)
                println "Deleting " + appFile
                delete appFile
            }
        }
        // On windows, for the installer we should also zip up the image
        if (project.properties['platform.name'] == 'windows') {
            def imageDir = new File(outputDir, "/dist/${qupathAppName}")
            if (imageDir.isDirectory() && findProperty('package')?.toLowerCase() in ['installer']) {
                println "Zipping $imageDir"
                ant.zip(destfile: new File(imageDir.getCanonicalPath() + ".zip")) {
                    fileset(dir: imageDir.getCanonicalPath()) {
                    }
                }
                // Ideally we'd delete here, but it often fails
//                try {
//                    delete imageDir
//                } catch (IOException e) {
//                    println "Exception trying to delete image: ${e.message}"
//                }
            }
        }
    }
    // Identify outputs, which are used to create checksums
    inputs.files jpackage.outputs.files
    outputs.files(jpackage.outputs.files.asFileTree.matching {
        // I think you can tell I'm not great with Gradle
        include {
            return it.file.parentFile.name == 'dist' &&
                    it.name.startsWith('QuPath') &&
                    !it.name.endsWith('.sha512') &&
                    !it.name.endsWith('.sha256') &&
                    !it.name.endsWith('.sha384')
        }
    })
}

// We may need to fix the version on Mac
jpackage.configure {
    finalizedBy jpackageFinalize
}


/**
 * Create SHA512 checksums of JPackage outputs
 */
task createChecksums(type: org.gradle.crypto.checksum.Checksum, dependsOn: jpackage) {
    def params = buildParameters()
    inputFiles.setFrom(jpackageFinalize.outputs)
    outputDirectory.set(params.outputDir)
    checksumAlgorithm.set(org.gradle.crypto.checksum.Checksum.Algorithm.SHA512)
    appendFileNameToChecksum.set(true)
}

/**
 * Get the name we want to use for the app.
 * On macOS, we want to append the architecture to make it easier to install both
 * the x64 and ARM versions on the same machine.
 * @param ext
 * @return
 */
String getCorrectAppName(String ext) {
    String baseName = qupathAppName
    if (ext == '.app' || ext == '.pkg') {
        if (!baseName.contains('-arm64') && !baseName.contains('-x64')) {
            if (System.properties['os.arch'] == 'aarch64')
                baseName = "${baseName}-arm64"
            else
                baseName = "${baseName}-x64"
        }
    }
    return "${baseName}${ext}"
}

/**
 * Try to resolve annoying macOS/Windows renaming with an invalid version
 * (I realise this is very awkward...)
 */
jpackage {
    doLast {
        def isLinux = project.properties['platform.name'] == 'linux'
        for (dir in outputs?.getFiles()?.files) {
            def extensions = ['.app', '.dmg', '.pkg', '.exe', '.msi', '.deb', '.rpm']
            def packageFiles = dir.listFiles()
            for (f in packageFiles) {
                for (ext in extensions) {
                    if (!f.name.endsWith(ext))
                        continue
                    String correctName = getCorrectAppName(ext)
                    if (!f.name.equals(correctName))
                        f.renameTo(new File(f.getParent(), correctName))
                }

                // Create a launch script including LD_LIBRARY_PATH for Linux
                if (isLinux && f.isDirectory() && new File(f, "bin").exists()) {
                    def fileLaunch = new File(f.getAbsolutePath() + "/bin/QuPath.sh")
                    println "Generating launch script at $fileLaunch"
                    fileLaunch.text = createLaunchScript()
                }
            }
        }
    }
}

/**
 * Encapsulate key parameters to pass to jpackage
 */
class JPackageParams {

    String mainJar
    List<String> jvmArgs = []
    String imageName = "QuPath"
    String appVersion
    List<String> imageOptions = []

    List<String> installerTypes
    boolean skipInstaller = false
    String installerName = "QuPath"
    List<String> installerOptions = []

    File resourceDir
    File outputDir

    @Override
    String toString() {
        return "JPackageParams{" +
                "mainJar='" + mainJar + '\'' +
                ", jvmArgs=" + jvmArgs +
                ", imageName='" + imageName + '\'' +
                ", appVersion='" + appVersion + '\'' +
                ", imageOptions=" + imageOptions +
                ", installerTypes=" + installerTypes +
                ", skipInstaller=" + skipInstaller +
                ", installerName='" + installerName + '\'' +
                ", installerOptions=" + installerOptions +
                ", resourceDir=" + resourceDir +
                ", outputDir=" + outputDir +
                '}'
    }
}

/**
 * Get the version, with any 'SNAPSHOT' element removed
 * @return
 */
String getNonSnapshotVersion() {
    qupathVersion.replace('-SNAPSHOT', '')
}

/**
 * Build default parameters for jpackage, customizing these according to the current platform
 * @return
 */
JPackageParams buildParameters() {
    String appVersion = getNonSnapshotVersion()

    def params = new JPackageParams()
    params.mainJar = project.jar.getArchiveFileName().get()
    params.outputDir = file("${rootProject.buildDir}/dist")
    params.appVersion = appVersion
    params.imageName = qupathAppName // Will need to be removed for some platforms
    params.installerName = "QuPath"
    params.jvmArgs += buildDefaultJvmArgs('$APPDIR', toolchainJavaVersion)

    // Configure according to the current platform
    def platform = properties['platform.name']
    def iconExt = properties['platform.iconExt']
    if (platform == 'macosx')
        configureJPackageMac(params)
    else if (platform == 'windows')
        configureJPackageWindows(params)
    else if (platform == 'linux')
        configureJPackageLinux(params)
    else
        logger.log(LogLevel.WARN, "Unknown platform ${platform} - may be unable to generate a package")

    params.resourceDir = project.file("jpackage/${platform}")

    File iconFile = project.file("jpackage/${platform}/QuPath.${iconExt}")
    if (iconFile.exists())
        params.imageOptions += ['--icon', iconFile.getAbsolutePath()]
    else
        logger.log(LogLevel.WARN, "No icon file found at ${iconFile}")

    return params
}

/**
 * Update package type according to 'package' parameter.
 * By default, we just create an image because that's faster
 * (although the jpackage default is to create all installers).
 * @param params
 * @param defaultInstallers
 */
void updatePackageType(JPackageParams params, String... defaultInstallers) {
    // Define platform-specific jpackage configuration options
    def packageType = findProperty('package')?.toLowerCase()
    if (!packageType || ['image', 'app-image'].contains(packageType) || project.properties['platform.name'] == 'macosx') {
        // We can't make installers directly on macOS - need to base them on an image
        params.skipInstaller = true
        params.installerTypes = [null]
        logger.info("No package type specified, using default ${packageType}")
    } else if (packageType == 'all') {
        params.skipInstaller = false
        params.installerTypes = [null]
    } else if (packageType == 'installer') {
        params.skipInstaller = false
        params.installerTypes = defaultInstallers as List
    } else {
        params.installerTypes = [packageType]
    }
}

/**
 * Custom configurations for Windows
 * @param params
 * @return
 */
def configureJPackageWindows(JPackageParams params) {
    updatePackageType(params, properties['platform.installerExt'])

    if (params.installerTypes.contains('msi')) {
        params.installerOptions += ['--win-menu']
        params.installerOptions += ['--win-dir-chooser']
        params.installerOptions += ['--win-shortcut']
        params.installerOptions += ['--win-per-user-install']
        params.installerOptions += ['--win-menu-group', 'QuPath']
    }

    // Can't have any -SNAPSHOT or similar added
    params.appVersion = stripVersionSuffix(params.appVersion)


    // Create a separate launcher with a console - this can help with debugging
    def fileTemp = File.createTempFile('qupath-building', '.properties')
    def consoleLauncherName = params.imageName + " (console)"
    def javaOptions = params.jvmArgs
    fileTemp.deleteOnExit()
    fileTemp.text = 'win-console=true'
    fileTemp << System.lineSeparator()
    fileTemp << 'java-options=' << '-Dqupath.config=console ' << String.join(" ", javaOptions) << System.lineSeparator()
    params.imageOptions += ['--add-launcher',
                            "\"${consoleLauncherName}\"=\"${fileTemp.getAbsolutePath()}\""]
}

/**
 * Custom configurations for macOS
 * @param params
 * @return
 */
def configureJPackageMac(JPackageParams params) {
    updatePackageType(params, properties['platform.installerExt'])

    params.installerOptions += ['--mac-package-name', 'QuPath']
    // Need to include the version so that we can have multiple versions installed
    params.installerOptions += ['--mac-package-identifier', "QuPath-${qupathVersion}"]

    // File associations supported on Mac
    setFileAssociations(params)

    // Can't have any -SNAPSHOT or similar added
    params.appVersion = stripVersionSuffix(params.appVersion)

    params.imageName = 'QuPath'
    params.installerName = 'QuPath'

    // Sadly, on a Mac we can't have an appVersion that starts with 0
    // See https://github.com/openjdk/jdk/blob/jdk-16+36/src/jdk.jpackage/macosx/classes/jdk/jpackage/internal/CFBundleVersion.java
    if (params.appVersion && params.appVersion.startsWith('0')) {
        params.appVersion = macOSDefaultVersion
    }
}

/**
 * Custom configurations for Linux
 * @param params
 * @return
 */
def configureJPackageLinux(JPackageParams params) {
    updatePackageType(params, properties['platform.installerExt'])
    // This has the same issues as on macOS with invalid .cfg file, requiring another name
    params.imageName = "QuPath"
}

/**
 * Strip suffixes (by default any starting with '-SNAPSHOT', '-rc') from any version string
 * @param version
 * @param suffixes
 * @return
 */
static String stripVersionSuffix(String version, String... suffixes) {
    if (suffixes.length == 0)
        suffixes = ['-SNAPSHOT', '-rc']
    for (def suffix in suffixes) {
        int lastDash = version.lastIndexOf(suffix)
        if (lastDash > 0)
            version = version.substring(0, lastDash)
    }
    return version
}

/**
 * Set file associations according to contents of a .properties file
 * @param params
 */
def setFileAssociations(JPackageParams params) {
    def associations = project.file("jpackage/associations")
            .listFiles()
            .findAll { it.isFile() && it.name.endsWith('.properties') }
    for (file in associations)
        params.installerOptions += ['--file-associations', file.getAbsolutePath()]
}

/**
 * Get the JavaVersion used with the current toolchain.
 * This is useful for JVM-specific arguments.
 */
JavaVersion getToolchainJavaVersion() {
    try {
        // Certainly feels like there should be a more direct way, but I couldn't find it
        def toolchain = project.getExtensions().getByType(JavaPluginExtension.class).getToolchain()
        def service = project.getExtensions().getByType(JavaToolchainService.class)
        def version = service.compilerFor(toolchain).get().getMetadata().getJvmVersion()
        return JavaVersion.toVersion(version)
    } catch (Exception e) {
        println "Unable to determine Java version from toolchain: ${e.getLocalizedMessage()}"
        return JavaVersion.current()
    }
    if (toolchain == null)
        return JavaVersion.toVersion(toolchain.getJavaLanguageVersion())
}

/**
 * Get default JVM arguments (e.g. to set memory, library path)
 * @return
 */
static List<String> buildDefaultJvmArgs(String libraryPath = '$APPDIR', JavaVersion javaVersion = JavaVersion.current()) {
    // Set up the main Java options
    def javaOptions = []

    // Set the library path to the app directory, for loading native libraries
    if (libraryPath != null)
        javaOptions << "-Djava.library.path=${libraryPath}"

    // Revert to pre-Java-16 behavior
    // See https://openjdk.java.net/jeps/396
    // If this is removed, things like adding metadata to a project entry will fail with errors such as
    //   ERROR: QuPath exception: class org.controlsfx.control.textfield.AutoCompletionBinding
    //   (in unnamed module @0x298a5e20) cannot access class com.sun.javafx.event.EventHandlerManager
    //   (in module javafx.base) because module javafx.base does not export com.sun.javafx.event to unnamed module
    // This Java option is not supported in Java 17+.
    // It is useful in Java 16, particularly for Bio-Formats memoization
    if (javaVersion == JavaVersion.VERSION_16) {
        println "Setting --illegal-access=permit for pre-Java 16 behavior"
        javaOptions << '--illegal-access=permit'
    }

    // Default to using 50% available memory
    javaOptions << '-XX:MaxRAMPercentage=50'

    return javaOptions
}


/**
 * Create a bash script that can be used to launch QuPath on Linux.
 * The purpose is to set LD_LIBRARY_PATH to use the local OpenSlide.
 * When not using this, other shared libraries are likely to be used instead.
 */
static String createLaunchScript() {
    return """#!/bin/bash
	        	
DIR="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
export LD_LIBRARY_PATH="\$DIR/../lib/app/"
"\$DIR/QuPath" "\$@"
"""
}
